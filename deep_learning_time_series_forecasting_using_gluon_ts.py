# -*- coding: utf-8 -*-
"""Deep Learning Time Series Forecasting using Gluon TS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1klML4T9zcOv9i9Tt9EvEXG81ZghTdcmo
"""

# !pip install --upgrade mxnet-cu101==1.6.0.post0
# !pip install --upgrade mxnet==1.6.0
!pip install gluonts

import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt

from gluonts.model.deepar import DeepAREstimator
from gluonts.trainer import Trainer
import numpy as np

mpl.rcParams['figure.figsize'] = (10, 8)
mpl.rcParams['axes.grid'] = False

df=pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/00374/energydata_complete.csv')

df

color_list = ["blue", "orange", "green", "red", "purple", "brown", "pink", "gray", "olive", "cyan"]

date_key = "date"

def Visualize(data):
    time_data = data[date_key]
    features= list(df.select_dtypes(include=[np.number]).columns.values)
    feature_size=len(features)
    fig, axes = plt.subplots(nrows=int(np.ceil(feature_size/2)), ncols=2, figsize=(14, feature_size*2), dpi=80, facecolor="w", edgecolor="k")
    for i in range(feature_size):
        key = features[i]
        c = color_list[i % (len(color_list))]
        t_data = data[key]
        t_data.index = time_data
        t_data.head()
        ax = t_data.plot(ax=axes[i // 2, i % 2], color=c, title="{}".format(key),rot=25)
        ax.legend([key])
    plt.tight_layout()

Visualize(df)

df_input=df[['date','Appliances','T_out','Press_mm_hg', 'RH_out', 'Windspeed', 'Tdewpoint', 'Visibility']]

df_input=df_input.set_index('date')

train_time="2016-05-10 00:00:00"
prediction_length=144

estimator = DeepAREstimator(freq="10min", context_length=720, prediction_length=prediction_length,
                            num_layers=2, num_cells=128, cell_type='lstm', trainer=Trainer(epochs=8))

from gluonts.dataset.common import ListDataset

training_data = ListDataset([{"start": df_input.index[0], "target": df_input.Appliances[:train_time]}], freq = "10min")

predictor = estimator.train(training_data=training_data)

test_data = ListDataset(
    [
        {"start": df_input.index[0], "target": df_input.Appliances[:"2016-05-11 00:00:00"]},
        {"start": df_input.index[0], "target": df_input.Appliances[:"2016-05-15 00:00:00"]}
    ],
    freq = "10min"
)

from gluonts.evaluation.backtest import make_evaluation_predictions

forecast_it, ts_it = make_evaluation_predictions(dataset=test_data, predictor=predictor, num_samples=100)

forecasts = list(forecast_it)
tss = list(ts_it)

forecast_entry = forecasts[0]

forecast_entry

def plot_prob_forecasts(ts_entry, forecast_entry):
    plot_length = prediction_length
    prediction_intervals = (80.0, 95.0)
    legend = ["observations", "median prediction"] + [f"{k}% prediction interval" for k in prediction_intervals][::-1]

    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    ts_entry[-plot_length:].plot(ax=ax)
    forecast_entry.plot(prediction_intervals=prediction_intervals, color='g')
    plt.grid(which="both")
    plt.legend(legend, loc="upper left")
    plt.show()

plot_prob_forecasts(tss[0], forecasts[0])
plot_prob_forecasts(tss[1], forecasts[1])

from gluonts.evaluation import Evaluator
evaluator = Evaluator(quantiles=[0.1, 0.5, 0.9])
agg_metrics, item_metrics = evaluator(iter(tss), iter(forecasts), num_series=len(test_data))

item_metrics





